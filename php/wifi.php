<?php

/**
 * WiFi Access Point Administrator - Extended Version
 * Manages WiFi configuration through /etc/hostapd/hostapd.conf
 * Added direct file editing capabilities and dual-band support (2.4GHz/5GHz)
 * Updated: 2025-06-11 04:03:19 by hemancini
 */

include 'header.php';

class WiFiAdmin
{
  private $configFile = '/etc/hostapd/hostapd.conf';
  private $backupDir = '/var/backups/hostapd/';

  public function __construct()
  {
    // Create backup directory if it doesn't exist
    if (!is_dir($this->backupDir)) {
      mkdir($this->backupDir, 0755, true);
    }
  }

  /**
   * Read current WiFi configuration
   */
  public function readConfig()
  {
    if (!file_exists($this->configFile)) {
      throw new Exception("Configuration file not found: " . $this->configFile);
    }

    $config = [];
    $lines = file($this->configFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

    foreach ($lines as $line) {
      $line = trim($line);
      if (empty($line) || $line[0] === '#') {
        continue;
      }

      if (strpos($line, '=') !== false) {
        list($key, $value) = explode('=', $line, 2);
        $config[trim($key)] = trim($value);
      }
    }

    return $config;
  }

  /**
   * Read raw file content
   */
  public function readRawConfig()
  {
    if (!file_exists($this->configFile)) {
      throw new Exception("Configuration file not found: " . $this->configFile);
    }

    return file_get_contents($this->configFile);
  }

  /**
   * Write raw content to file
   */
  public function writeRawConfig($content)
  {
    // Create backup first
    $this->createBackup();

    if (file_put_contents($this->configFile, $content) === false) {
      throw new Exception("Failed to write configuration file");
    }

    return true;
  }

  /**
   * Write configuration to file
   */
  public function writeConfig($config)
  {
    // Create backup first
    $this->createBackup();

    $content = "# WiFi Access Point Configuration\n";
    $content .= "# Generated by WiFi Admin on " . date('Y-m-d H:i:s') . "\n";
    $content .= "# User: " . get_current_user() . "\n\n";

    foreach ($config as $key => $value) {
      $content .= "$key=$value\n";
    }

    if (file_put_contents($this->configFile, $content) === false) {
      throw new Exception("Failed to write configuration file");
    }

    return true;
  }

  /**
   * Create backup of current configuration
   */
  private function createBackup()
  {
    if (file_exists($this->configFile)) {
      $backupFile = $this->backupDir . 'hostapd.conf.' . date('Y-m-d_H-i-s');
      copy($this->configFile, $backupFile);
    }
  }

  /**
   * Get list of backup files
   */
  public function getBackups()
  {
    $backups = [];
    if (is_dir($this->backupDir)) {
      $files = glob($this->backupDir . 'hostapd.conf.*');
      foreach ($files as $file) {
        $backups[] = [
          'filename' => basename($file),
          'path' => $file,
          'date' => date('Y-m-d H:i:s', filemtime($file)),
          'size' => filesize($file)
        ];
      }
      // Sort by date descending
      usort($backups, function ($a, $b) {
        return filemtime($b['path']) - filemtime($a['path']);
      });
    }
    return $backups;
  }

  /**
   * Restore from backup
   */
  public function restoreBackup($backupFile)
  {
    $backupPath = $this->backupDir . $backupFile;
    if (!file_exists($backupPath)) {
      throw new Exception("Backup file not found: " . $backupFile);
    }

    // Create backup of current file before restoring
    $this->createBackup();

    if (!copy($backupPath, $this->configFile)) {
      throw new Exception("Failed to restore backup");
    }

    return true;
  }

  /**
   * Restart hostapd service
   */
  public function restartService()
  {
    $output = [];
    $returnVar = 0;

    // Try systemctl first, then service command
    exec('sudo systemctl restart hostapd 2>&1', $output, $returnVar);

    if ($returnVar !== 0) {
      exec('sudo service hostapd restart 2>&1', $output, $returnVar);
    }

    return ['success' => $returnVar === 0, 'output' => implode("\n", $output)];
  }

  /**
   * Get service status
   */
  public function getServiceStatus()
  {
    $output = [];
    exec('sudo systemctl is-active hostapd 2>/dev/null', $output);
    return isset($output[0]) ? $output[0] : 'unknown';
  }

  /**
   * Get detailed service info
   */
  public function getServiceInfo()
  {
    $output = [];
    exec('sudo systemctl status hostapd 2>/dev/null', $output);
    return implode("\n", $output);
  }

  /**
   * Get valid channels for WiFi bands
   */
  public function getValidChannels($band = '2.4GHz')
  {
    if ($band === '5GHz') {
      // 5GHz channels (varies by region, these are commonly available)
      // For US: Channel ranges 36-48, 149-165
      return [36, 40, 44, 48, 149, 153, 157, 161, 165];
    } else {
      // 2.4GHz channels
      return range(1, 11); // US typically allows 1-11
    }
  }

  /**
   * Get available wireless network interfaces
   */
  public function getWirelessInterfaces()
  {
    $interfaces = [];
    $output = [];
    exec('ls /sys/class/net | grep -E "wlan|wlp"', $output);

    foreach ($output as $interface) {
      $interfaces[] = trim($interface);
    }

    // Add some default interfaces if none found
    if (empty($interfaces)) {
      $interfaces = ['wlan0', 'wlan1', 'wlp2s0'];
    }

    return $interfaces;
  }

  /**
   * Validate WiFi configuration
   */
  public function validateConfig($config)
  {
    $errors = [];

    // Required fields
    $required = ['interface', 'driver', 'ssid', 'hw_mode', 'channel'];
    foreach ($required as $field) {
      if (!isset($config[$field]) || empty($config[$field])) {
        $errors[] = "Field '$field' is required";
      }
    }

    // Validate WPA settings
    if (isset($config['wpa']) && $config['wpa'] > 0) {
      if (!isset($config['wpa_passphrase']) || strlen($config['wpa_passphrase']) < 8) {
        $errors[] = "WPA passphrase must be at least 8 characters";
      }
    }

    return $errors;
  }

  /**
   * Validate raw configuration content
   */
  public function validateRawConfig($content)
  {
    $errors = [];
    $lines = explode("\n", $content);
    $lineNum = 0;

    foreach ($lines as $line) {
      $lineNum++;
      $line = trim($line);

      // Skip empty lines and comments
      if (empty($line) || $line[0] === '#') {
        continue;
      }

      // Check for proper key=value format
      if (strpos($line, '=') === false) {
        $errors[] = "Line $lineNum: Invalid format (missing '='): $line";
      }
    }

    return $errors;
  }
}

// Initialize WiFi Admin
$wifiAdmin = new WiFiAdmin();
$message = '';
$error = '';
$currentView = $_GET['view'] ?? 'form';

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  try {
    if (isset($_POST['action'])) {
      switch ($_POST['action']) {
        case 'save':
          // Determine if we're using 2.4GHz or 5GHz band
          $wifiBand = $_POST['wifi_band'] ?? '2.4GHz';

          // Base configuration for both bands
          $config = [
            'interface' => $_POST['interface'] ?? 'wlan0',
            'driver' => $_POST['driver'] ?? 'nl80211',
            'ssid' => $_POST['ssid'] ?? '',
            'wmm_enabled' => '1',
            'macaddr_acl' => '0',
            'auth_algs' => '1',
            'ignore_broadcast_ssid' => $_POST['ignore_broadcast_ssid'] ?? '0',
            'wpa' => $_POST['wpa'] ?? '2',
            'wpa_passphrase' => $_POST['wpa_passphrase'] ?? '',
            'wpa_key_mgmt' => 'WPA-PSK',
            'rsn_pairwise' => 'CCMP',
            'country_code' => $_POST['country_code'] ?? 'US',
          ];

          // Set specific configuration for 5GHz or 2.4GHz
          if ($wifiBand === '5GHz') {
            // 5GHz specific configuration
            $config['hw_mode'] = 'a';
            $config['channel'] = $_POST['channel_5g'] ?? '36';
            $config['ieee80211n'] = '1';
            $config['ieee80211ac'] = '1';
          } else {
            // 2.4GHz specific configuration
            $config['hw_mode'] = 'g';
            $config['channel'] = $_POST['channel_2g'] ?? '6';
            $config['ieee80211n'] = $_POST['ieee80211n'] ?? '1';
          }

          // Remove empty values
          $config = array_filter($config, function ($value) {
            return $value !== '';
          });

          $errors = $wifiAdmin->validateConfig($config);
          if (empty($errors)) {
            $wifiAdmin->writeConfig($config);
            $message = "Configuration saved successfully!";

            // Restart the service if requested
            if (isset($_POST['restart_after_save'])) {
              $result = $wifiAdmin->restartService();
              if ($result['success']) {
                $message .= " WiFi service restarted successfully!";
              } else {
                $error = "Configuration saved but failed to restart WiFi service: " . $result['output'];
              }
            }
          } else {
            $error = "Validation errors: " . implode(", ", $errors);
          }
          break;

        case 'save_raw':
          $rawContent = $_POST['raw_content'] ?? '';
          $errors = $wifiAdmin->validateRawConfig($rawContent);

          if (empty($errors)) {
            $wifiAdmin->writeRawConfig($rawContent);
            $message = "Raw configuration saved successfully!";
          } else {
            $error = "Validation errors: " . implode(", ", $errors);
          }
          break;

        case 'restart':
          $result = $wifiAdmin->restartService();
          if ($result['success']) {
            $message = "WiFi service restarted successfully!";
          } else {
            $error = "Failed to restart WiFi service: " . $result['output'];
          }
          break;

        case 'restore_backup':
          $backupFile = $_POST['backup_file'] ?? '';
          if ($backupFile) {
            $wifiAdmin->restoreBackup($backupFile);
            $message = "Configuration restored from backup: " . $backupFile;
          } else {
            $error = "No backup file selected";
          }
          break;
      }
    }
  } catch (Exception $e) {
    $error = $e->getMessage();
  }
}

// Read current configuration
try {
  $currentConfig = $wifiAdmin->readConfig();
  $rawConfig = $wifiAdmin->readRawConfig();
} catch (Exception $e) {
  $currentConfig = [];
  $rawConfig = '';
  $error = "Could not read configuration: " . $e->getMessage();
}

$serviceStatus = $wifiAdmin->getServiceStatus();
$serviceInfo = $wifiAdmin->getServiceInfo();
$backups = $wifiAdmin->getBackups();

// Determine current WiFi band
$currentBand = '2.4GHz';
if (isset($currentConfig['hw_mode']) && $currentConfig['hw_mode'] === 'a') {
  $currentBand = '5GHz';
}

// Get available wireless interfaces
$availableInterfaces = $wifiAdmin->getWirelessInterfaces();

// Get valid channels for current band
$validChannels2G = $wifiAdmin->getValidChannels('2.4GHz');
$validChannels5G = $wifiAdmin->getValidChannels('5GHz');
?>

<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WiFi Access Point Administrator - Dual-Band</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f5f5f5;
    }

    .container {
      max-width: 900px;
      margin: 0 auto;
      background-color: white;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    h1 {
      color: #333;
      text-align: center;
      margin-bottom: 30px;
    }

    .tabs {
      display: flex;
      border-bottom: 2px solid #ddd;
      margin-bottom: 30px;
    }

    .tab {
      padding: 12px 24px;
      background: #f8f9fa;
      border: 1px solid #ddd;
      border-bottom: none;
      cursor: pointer;
      text-decoration: none;
      color: #555;
      margin-right: 5px;
      border-radius: 5px 5px 0 0;
    }

    .tab.active {
      background: white;
      color: #333;
      font-weight: bold;
    }

    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    .status {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 20px;
      text-align: center;
      font-weight: bold;
    }

    .status.active {
      /* background-color: #d4edda; */
      color: #155724;
    }

    .status.inactive {
      background-color: #f8d7da;
      color: #721c24;
    }

    .status.unknown {
      background-color: #fff3cd;
      color: #856404;
    }

    .status-indicator {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 10px;
    }

    .status.active .status-indicator {
      background-color: #28a745;
      box-shadow: 0 0 8px rgba(40, 167, 69, 0.8);
      animation: pulse 1.5s infinite;
    }

    .status.inactive .status-indicator {
      background-color: #dc3545;
      box-shadow: 0 0 8px rgba(220, 53, 69, 0.8);
    }

    .status.unknown .status-indicator {
      background-color: #ffc107;
      box-shadow: 0 0 8px rgba(255, 193, 7, 0.8);
    }

    .form-group {
      margin-bottom: 20px;
    }

    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
      color: #555;
    }

    input,
    select,
    textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 14px;
      box-sizing: border-box;
    }

    textarea {
      font-family: 'Courier New', monospace;
      min-height: 400px;
      resize: vertical;
    }

    input:focus,
    select:focus,
    textarea:focus {
      outline: none;
      border-color: #007bff;
      box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    }

    .btn {
      padding: 12px 24px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      margin-right: 10px;
      margin-bottom: 10px;
    }

    .btn-primary {
      background-color: #007bff;
      color: white;
    }

    .btn-warning {
      background-color: #ffc107;
      color: #212529;
    }

    .btn-success {
      background-color: #28a745;
      color: white;
    }

    .btn-danger {
      background-color: #dc3545;
      color: white;
    }

    .btn-secondary {
      background-color: #6c757d;
      color: white;
    }

    .btn:hover {
      opacity: 0.9;
    }

    .alert {
      padding: 15px;
      border-radius: 5px;
      margin-bottom: 20px;
    }

    .alert-success {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }

    .alert-danger {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c2c7;
    }

    .form-row {
      display: flex;
      gap: 20px;
    }

    .form-row .form-group {
      flex: 1;
    }

    .file-info {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 5px;
      margin-bottom: 20px;
      font-family: monospace;
    }

    .backup-list {
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 5px;
    }

    .backup-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .backup-item:last-child {
      border-bottom: none;
    }

    .backup-info {
      flex: 1;
    }

    .backup-name {
      font-weight: bold;
      color: #333;
    }

    .backup-meta {
      font-size: 12px;
      color: #666;
    }

    .service-output {
      background: #1e1e1e;
      color: #f0f0f0;
      padding: 15px;
      border-radius: 5px;
      font-family: monospace;
      font-size: 12px;
      white-space: pre-wrap;
      max-height: 300px;
      overflow-y: auto;
    }

    .line-numbers {
      background: #f8f9fa;
      border: 1px solid #ddd;
      border-right: 2px solid #007bff;
      padding: 10px 5px;
      font-family: monospace;
      font-size: 12px;
      color: #666;
      text-align: right;
      float: left;
      min-width: 40px;
      user-select: none;
    }

    .editor-container {
      position: relative;
      border: 1px solid #ddd;
      border-radius: 5px;
      overflow: hidden;
    }

    .band-selector {
      display: flex;
      margin-bottom: 30px;
      border: 1px solid #ddd;
      border-radius: 5px;
      overflow: hidden;
    }

    .band-option {
      flex: 1;
      text-align: center;
      padding: 15px;
      cursor: pointer;
      position: relative;
      font-weight: bold;
      transition: background-color 0.3s, transform 0.2s;
    }

    .band-option.active {
      background-color: #007bff;
      color: white;
      transform: scale(1.02);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      z-index: 1;
    }

    .band-option:not(.active) {
      background-color: #f8f9fa;
      color: #333;
    }

    .band-option:first-child {
      border-right: 1px solid #ddd;
    }

    .band-description {
      font-size: 12px;
      margin-top: 5px;
      font-weight: normal;
    }

    .band-content {
      display: none;
    }

    .band-content.active {
      display: block;
    }

    .info-badge {
      background-color: #007bff;
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      margin-left: 5px;
      cursor: help;
    }

    .band-icon {
      font-size: 24px;
      margin-right: 8px;
      vertical-align: middle;
    }

    /* Indicador de banda actualmente configurada */
    .band-status {
      position: absolute;
      top: 8px;
      right: 8px;
      border-radius: 50%;
      width: 12px;
      height: 12px;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    }

    .band-status.configured {
      background-color: #28a745;
      box-shadow: 0 0 8px rgba(40, 167, 69, 0.8);
      animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7);
      }

      70% {
        box-shadow: 0 0 0 5px rgba(40, 167, 69, 0);
      }

      100% {
        box-shadow: 0 0 0 0 rgba(40, 167, 69, 0);
      }
    }

    .band-label {
      display: inline-block;
      padding: 3px 8px;
      font-size: 10px;
      font-weight: bold;
      position: absolute;
      top: 0;
      right: 0;
      border-radius: 0 5px 0 5px;
      text-transform: uppercase;
    }

    .band-label.active {
      background-color: #28a745;
      color: white;
    }

    .current-config-badge {
      display: inline-block;
      background-color: #28a745;
      color: white;
      padding: 2px 10px;
      border-radius: 30px;
      font-size: 12px;
      margin-top: 5px;
      font-weight: normal;
    }

    @media (max-width: 768px) {
      .form-row {
        flex-direction: column;
        gap: 0;
      }

      .tabs {
        flex-wrap: wrap;
      }

      .tab {
        margin-bottom: 5px;
      }

      .band-selector {
        flex-direction: column;
      }

      .band-option:first-child {
        border-right: none;
        border-bottom: 1px solid #ddd;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <h1 style="margin-top: 0px; margin-block: 0px;">🔧 WiFi Access Point Administrator</h1>

    <div class="status <?php echo $serviceStatus; ?>">
      <span class="status-indicator"></span>
      Service Status: <?php echo strtoupper($serviceStatus); ?>
    </div>

    <?php if ($message): ?>
      <div class="alert alert-success"><?php echo htmlspecialchars($message); ?></div>
    <?php endif; ?>

    <?php if ($error): ?>
      <div class="alert alert-danger"><?php echo htmlspecialchars($error); ?></div>
    <?php endif; ?>

    <!-- Navigation Tabs -->
    <div class="tabs">
      <a href="?view=form" class="tab <?php echo $currentView === 'form' ? 'active' : ''; ?>">📝 Form Editor</a>
      <a href="?view=raw" class="tab <?php echo $currentView === 'raw' ? 'active' : ''; ?>">📄 Raw Editor</a>
      <a href="?view=backups" class="tab <?php echo $currentView === 'backups' ? 'active' : ''; ?>">💾 Backups</a>
      <a href="?view=status" class="tab <?php echo $currentView === 'status' ? 'active' : ''; ?>">📊 Service Status</a>
    </div>

    <!-- Form Editor Tab -->
    <div class="tab-content <?php echo $currentView === 'form' ? 'active' : ''; ?>">
      <h2>🎛️ WiFi Configuration</h2>

      <form method="POST">
        <input type="hidden" name="action" value="save">

        <!-- WiFi Band Selector con Indicador -->
        <h3>Select WiFi Band <small style="font-weight: normal; color: #666;">Current configuration: <span style="color: #28a745; font-weight: bold;"><?php echo $currentBand; ?></span></small></h3>
        <div class="band-selector">
          <div class="band-option <?php echo $currentBand === '2.4GHz' ? 'active' : ''; ?>" onclick="selectBand('2.4GHz')">
            <span class="band-icon">📶</span> 2.4 GHz
            <div class="band-description">Better range, more compatibility, more interference</div>
            <?php if ($currentBand === '2.4GHz'): ?>
              <div class="band-status configured" title="Currently configured"></div>
              <div class="current-config-badge">CONFIGURED</div>
            <?php endif; ?>
          </div>
          <div class="band-option <?php echo $currentBand === '5GHz' ? 'active' : ''; ?>" onclick="selectBand('5GHz')">
            <span class="band-icon">🚀</span> 5 GHz
            <div class="band-description">Faster speeds, less interference, shorter range</div>
            <?php if ($currentBand === '5GHz'): ?>
              <div class="band-status configured" title="Currently configured"></div>
              <div class="current-config-badge">CONFIGURED</div>
            <?php endif; ?>
          </div>
        </div>
        <input type="hidden" id="wifi_band" name="wifi_band" value="<?php echo htmlspecialchars($currentBand); ?>">

        <!-- Basic WiFi Settings (Common for both bands) -->
        <div class="form-row">
          <div class="form-group">
            <label for="interface">Network Interface:</label>
            <select id="interface" name="interface">
              <?php foreach ($availableInterfaces as $interface): ?>
                <option value="<?php echo htmlspecialchars($interface); ?>" <?php echo ($currentConfig['interface'] ?? '') === $interface ? 'selected' : ''; ?>>
                  <?php echo htmlspecialchars($interface); ?>
                </option>
              <?php endforeach; ?>
            </select>
          </div>

          <div class="form-group">
            <label for="driver">Driver:</label>
            <select id="driver" name="driver">
              <option value="nl80211" <?php echo ($currentConfig['driver'] ?? '') === 'nl80211' ? 'selected' : ''; ?>>nl80211</option>
              <option value="hostap" <?php echo ($currentConfig['driver'] ?? '') === 'hostap' ? 'selected' : ''; ?>>hostap</option>
            </select>
          </div>
        </div>

        <div class="form-group">
          <label for="ssid">SSID (Network Name):</label>
          <input type="text" id="ssid" name="ssid"
            value="<?php echo htmlspecialchars($currentConfig['ssid'] ?? ''); ?>" required>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="country_code">Country Code:</label>
            <select id="country_code" name="country_code">
              <option value="US" <?php echo ($currentConfig['country_code'] ?? '') === 'US' ? 'selected' : ''; ?>>United States (US)</option>
              <option value="ES" <?php echo ($currentConfig['country_code'] ?? '') === 'ES' ? 'selected' : ''; ?>>Spain (ES)</option>
              <option value="GB" <?php echo ($currentConfig['country_code'] ?? '') === 'GB' ? 'selected' : ''; ?>>United Kingdom (GB)</option>
              <option value="CA" <?php echo ($currentConfig['country_code'] ?? '') === 'CA' ? 'selected' : ''; ?>>Canada (CA)</option>
              <option value="DE" <?php echo ($currentConfig['country_code'] ?? '') === 'DE' ? 'selected' : ''; ?>>Germany (DE)</option>
              <option value="FR" <?php echo ($currentConfig['country_code'] ?? '') === 'FR' ? 'selected' : ''; ?>>France (FR)</option>
              <option value="JP" <?php echo ($currentConfig['country_code'] ?? '') === 'JP' ? 'selected' : ''; ?>>Japan (JP)</option>
              <option value="AU" <?php echo ($currentConfig['country_code'] ?? '') === 'AU' ? 'selected' : ''; ?>>Australia (AU)</option>
              <option value="BR" <?php echo ($currentConfig['country_code'] ?? '') === 'BR' ? 'selected' : ''; ?>>Brazil (BR)</option>
              <option value="MX" <?php echo ($currentConfig['country_code'] ?? '') === 'MX' ? 'selected' : ''; ?>>Mexico (MX)</option>
            </select>
          </div>

          <!-- Channel Selection Based on Band -->
          <div class="form-group band-content <?php echo $currentBand === '2.4GHz' ? 'active' : ''; ?>" id="2.4GHz-content">
            <label for="channel_2g">2.4GHz Channel:</label>
            <select id="channel_2g" name="channel_2g">
              <?php foreach ($validChannels2G as $channel): ?>
                <option value="<?php echo $channel; ?>" <?php echo ($currentBand === '2.4GHz' && ($currentConfig['channel'] ?? '') == $channel) ? 'selected' : ''; ?>>
                  <?php echo $channel; ?>
                </option>
              <?php endforeach; ?>
            </select>
          </div>

          <div class="form-group band-content <?php echo $currentBand === '5GHz' ? 'active' : ''; ?>" id="5GHz-content">
            <label for="channel_5g">5GHz Channel:</label>
            <select id="channel_5g" name="channel_5g">
              <?php foreach ($validChannels5G as $channel): ?>
                <option value="<?php echo $channel; ?>" <?php echo ($currentBand === '5GHz' && ($currentConfig['channel'] ?? '') == $channel) ? 'selected' : ''; ?>>
                  <?php echo $channel; ?>
                </option>
              <?php endforeach; ?>
            </select>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="wpa">Security Mode:</label>
            <select id="wpa" name="wpa">
              <option value="0" <?php echo ($currentConfig['wpa'] ?? '') === '0' ? 'selected' : ''; ?>>Open (No Security)</option>
              <option value="1" <?php echo ($currentConfig['wpa'] ?? '') === '1' ? 'selected' : ''; ?>>WPA</option>
              <option value="2" <?php echo ($currentConfig['wpa'] ?? '') === '2' ? 'selected' : ''; ?>>WPA2</option>
              <option value="3" <?php echo ($currentConfig['wpa'] ?? '') === '3' ? 'selected' : ''; ?>>WPA/WPA2 Mixed</option>
            </select>
          </div>

          <div class="form-group">
            <label for="ignore_broadcast_ssid">Hide SSID:</label>
            <select id="ignore_broadcast_ssid" name="ignore_broadcast_ssid">
              <option value="0" <?php echo ($currentConfig['ignore_broadcast_ssid'] ?? '') === '0' ? 'selected' : ''; ?>>No</option>
              <option value="1" <?php echo ($currentConfig['ignore_broadcast_ssid'] ?? '') === '1' ? 'selected' : ''; ?>>Yes</option>
            </select>
          </div>
        </div>

        <div class="form-group">
          <label for="wpa_passphrase">WiFi Password (minimum 8 characters):</label>
          <input type="password" id="wpa_passphrase" name="wpa_passphrase"
            value="<?php echo htmlspecialchars($currentConfig['wpa_passphrase'] ?? ''); ?>"
            minlength="8">
        </div>

        <div style="margin-top: 30px;">
          <button type="submit" class="btn btn-primary">💾 Save Configuration</button>
          <button type="button" class="btn btn-warning" onclick="confirmAndRestart()">🔄 Save & Restart Service</button>
        </div>
      </form>
    </div>

    <!-- Raw Editor Tab -->
    <div class="tab-content <?php echo $currentView === 'raw' ? 'active' : ''; ?>">
      <h2>📝 Raw Configuration Editor</h2>

      <div class="file-info">
        <strong>File:</strong> /etc/hostapd/hostapd.conf<br>
        <strong>Size:</strong> <?php echo strlen($rawConfig); ?> bytes<br>
        <strong>Last Modified:</strong> <?php echo file_exists('/etc/hostapd/hostapd.conf') ? date('Y-m-d H:i:s', filemtime('/etc/hostapd/hostapd.conf')) : 'Unknown'; ?><br>
        <strong>Current User:</strong> hemancini<br>
        <strong>Current WiFi Band:</strong> <span style="color: #28a745; font-weight: bold;"><?php echo $currentBand; ?></span>
      </div>

      <form method="POST">
        <input type="hidden" name="action" value="save_raw">

        <div class="form-group">
          <label for="raw_content">Configuration Content:</label>
          <div class="editor-container">
            <textarea id="raw_content" name="raw_content" placeholder="Enter hostapd configuration..."><?php echo htmlspecialchars($rawConfig); ?></textarea>
          </div>
        </div>

        <div style="margin-top: 20px;">
          <button type="submit" class="btn btn-success">💾 Save Raw Configuration</button>
          <button type="button" class="btn btn-secondary" onclick="location.reload()">🔄 Reload</button>
        </div>
      </form>

      <div style="margin-top: 30px; padding: 15px; background-color: #fff3cd; border-radius: 5px;">
        <h4>⚠️ Raw Editor Warning</h4>
        <p><strong>Be careful when editing the raw configuration!</strong></p>
        <ul>
          <li>Invalid syntax can prevent the WiFi service from starting</li>
          <li>A backup is automatically created before saving</li>
          <li>Use the Backups tab to restore previous versions if needed</li>
          <li>Comments start with # and are ignored</li>
          <li>Format: parameter=value (one per line)</li>
        </ul>
      </div>
    </div>

    <!-- Backups Tab -->
    <div class="tab-content <?php echo $currentView === 'backups' ? 'active' : ''; ?>">
      <h2>💾 Configuration Backups</h2>

      <?php if (empty($backups)): ?>
        <div class="alert alert-info">
          <strong>No backups found.</strong> Backups are automatically created when you save configuration changes.
        </div>
      <?php else: ?>
        <form method="POST">
          <input type="hidden" name="action" value="restore_backup">

          <div class="backup-list">
            <?php foreach ($backups as $backup): ?>
              <div class="backup-item">
                <div class="backup-info">
                  <div class="backup-name"><?php echo htmlspecialchars($backup['filename']); ?></div>
                  <div class="backup-meta">
                    📅 <?php echo $backup['date']; ?> |
                    📦 <?php echo number_format($backup['size']); ?> bytes
                  </div>
                </div>
                <div>
                  <input type="radio" name="backup_file" value="<?php echo htmlspecialchars($backup['filename']); ?>"
                    id="backup_<?php echo md5($backup['filename']); ?>">
                  <label for="backup_<?php echo md5($backup['filename']); ?>">Select</label>
                </div>
              </div>
            <?php endforeach; ?>
          </div>

          <div style="margin-top: 20px;">
            <button type="submit" class="btn btn-warning"
              onclick="return confirm('Are you sure you want to restore the selected backup? This will overwrite the current configuration.')">
              🔄 Restore Selected Backup
            </button>
          </div>
        </form>
      <?php endif; ?>
    </div>

    <!-- Service Status Tab -->
    <div class="tab-content <?php echo $currentView === 'status' ? 'active' : ''; ?>">
      <h2>📊 Service Status & Control</h2>

      <div class="form-group">
        <h3>Current Status</h3>
        <div style="margin-bottom: 15px; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
          <strong>Current WiFi Band:</strong> <span style="color: #28a745; font-weight: bold;"><?php echo $currentBand; ?></span>
          <span style="margin-left: 20px;"><strong>Channel:</strong> <?php echo htmlspecialchars($currentConfig['channel'] ?? 'N/A'); ?></span>
          <span style="margin-left: 20px;"><strong>SSID:</strong> <?php echo htmlspecialchars($currentConfig['ssid'] ?? 'N/A'); ?></span>
        </div>
        <div class="service-output"><?php echo htmlspecialchars($serviceInfo); ?></div>
      </div>

      <form method="POST" style="margin-top: 20px;">
        <input type="hidden" name="action" value="restart">
        <button type="submit" class="btn btn-warning"
          onclick="return confirm('¿Estás seguro de que quieres reiniciar el servicio WiFi?')">
          🔄 Restart WiFi Service
        </button>
      </form>
    </div>

    <!-- Common Actions -->
    <div style="margin-top: 40px; padding-top: 20px; border-top: 2px solid #eee;">
      <h3>🚀 Quick Actions</h3>
      <form method="POST" style="display: inline;">
        <input type="hidden" name="action" value="restart">
        <button type="submit" class="btn btn-warning"
          onclick="return confirm('¿Estás seguro de que quieres reiniciar el servicio WiFi?')">
          🔄 Restart Service
        </button>
      </form>
    </div>

    <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666;">
      <strong>Note:</strong> This tool modifies /etc/hostapd/hostapd.conf. Make sure you have proper permissions (sudo) to restart the hostapd service.
      Backups are automatically created in /var/backups/hostapd/ before any changes.<br>
      <strong>Current User:</strong> hemancini | <strong>Server Time:</strong> <?php echo date('Y-m-d H:i:s'); ?> UTC | <strong>Current WiFi Band:</strong> <?php echo $currentBand; ?>
    </div>
  </div>

  <script>
    // Function to select WiFi band
    function selectBand(band) {
      // Update hidden input
      document.getElementById('wifi_band').value = band;

      // Update UI for band selector
      const bandOptions = document.querySelectorAll('.band-option');
      bandOptions.forEach(option => {
        if (option.textContent.includes(band)) {
          option.classList.add('active');
        } else {
          option.classList.remove('active');
        }
      });

      // Show/hide band-specific content
      document.querySelectorAll('.band-content').forEach(elem => {
        elem.classList.remove('active');
      });
      document.getElementById(band + '-content').classList.add('active');
    }

    // Function to save and restart in one action
    function confirmAndRestart() {
      if (confirm('¿Estás seguro de que quieres guardar la configuración y reiniciar el servicio WiFi?')) {
        const form = document.querySelector('form');
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'restart_after_save';
        input.value = '1';
        form.appendChild(input);
        form.submit();
      }
    }

    // Add line numbers to textarea
    function addLineNumbers() {
      const textarea = document.getElementById('raw_content');
      if (!textarea) return;
    }

    // Add event listeners
    document.addEventListener('DOMContentLoaded', function() {
      const textarea = document.getElementById('raw_content');
      if (textarea) {
        addLineNumbers();
      }

      // Initialize band selector based on current value
      const currentBand = document.getElementById('wifi_band').value;
      selectBand(currentBand);
    });

    // Confirm before leaving if there are unsaved changes
    let originalContent = '';
    window.addEventListener('load', function() {
      const textarea = document.getElementById('raw_content');
      if (textarea) {
        originalContent = textarea.value;
      }
    });

    window.addEventListener('beforeunload', function(e) {
      const textarea = document.getElementById('raw_content');
      if (textarea && textarea.value !== originalContent) {
        e.preventDefault();
        e.returnValue = '';
      }
    });
  </script>
</body>

</html>